{"version":3,"sources":["square.js","board.js","game.js","App.js","serviceWorker.js","index.js"],"names":["Square","this","props","isKn","value","className","onClick","src","Component","propsTypes","PropsTypes","number","img","string","Board","ind","im","squares","po","console","log","rows","Array","fill","cols","map","row","indr","col","indc","key","renderSquare","id","renderBoard","Game","pok","Math","floor","random","state","Squares","step","setState","i","diry","dirx","can","j","mod","push","length","alert","re","restart","style","border","color","handleClick","fontSize","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.15a71074.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport './square.css'\r\nimport PropsTypes from 'prop-types'\r\n\r\nclass Square extends Component {\r\n    render(){\r\n        const {isKn, value} = this.props;\r\n        if (isKn===true)\r\n            return(\r\n                <button className=\"square\" onClick={this.props.onClick}> <img src=\"knight.png\" className=\"img\"/>\r\n                </button>\r\n            )\r\n        else\r\n            return(\r\n                <button className=\"square\" onClick={this.props.onClick}>\r\n                    {this.props.value}\r\n                </button>\r\n            )\r\n    }\r\n    static propsTypes = {\r\n        value: PropsTypes.number,\r\n        img: PropsTypes.string\r\n    }\r\n}\r\n\r\nexport default Square","import React, {Component} from 'react'\r\nimport Square from './square'\r\nimport './board.css'\r\n\r\nclass Board extends Component {\r\n    renderSquare(ind, im){\r\n        return (\r\n            <Square value={this.props.squares[ind]}\r\n                    isKn={im}  \r\n                    onClick={() => {this.props.onClick(ind)}}\r\n                    \r\n            />\r\n        )\r\n    }\r\n\r\n    renderBoard(){\r\n        const po = this.props.po\r\n        console.log(`${po}`)\r\n\r\n        const rows = Array(5).fill(null);\r\n        const cols = rows;\r\n\r\n        const board = rows.map((row, indr) => {\r\n            const squares = cols.map((col, indc) => {\r\n                if(indr*5+indc=== po)\r\n                    return <span key={po}>{this.renderSquare(po, true)}</span>\r\n                else\r\n                    return <span key={indr*5+indc}>{this.renderSquare(indr*5+indc,false)}</span>\r\n            })\r\n            return <div className=\"board-row\" key={indr}>{squares}</div>\r\n        })\r\n        return board;\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div id=\"container\">\r\n                {/* <button onClick={() => this.renderBoard()}>Restart!</button> */}\r\n                {this.renderBoard()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Board;","import React, {Component} from 'react'\r\nimport Board from './board'\r\nimport './game.css'\r\n//import Square from './square';\r\n\r\n\r\n\r\nclass Game extends Component {\r\n    constructor(props){\r\n        const pok = Math.floor(Math.random()*25);\r\n        //console.log(pok);\r\n        super(props);\r\n        this.state = {\r\n            Squares: Array(25).fill(null),\r\n            step: 0,\r\n            po:pok\r\n        }\r\n        const squares=this.state.Squares;\r\n        squares[pok] = 'X';\r\n        this.setState({Squares: squares});\r\n        //console.log(this.state.po);\r\n    }\r\n\r\n    handleClick(i) {\r\n        const diry = [-10, -10, -5, -5, 5, 5, 10, 10];\r\n        const dirx = [-1, 1, -2, 2, -2, 2, -1, 1];\r\n        const squares=this.state.Squares;\r\n        var po=this.state.po;\r\n        var can = [];\r\n        for(let j=0; j<8;j++){\r\n            const mod = po % 5;\r\n            if(po + diry[j] >= 0 && po+diry[j] <=24 && mod+dirx[j] >=0 && mod+dirx[j]<=4) \r\n                if(squares[po+dirx[j]+diry[j]] !== 'X')\r\n                    can.push(po+dirx[j]+diry[j]);\r\n        }\r\n        ///console.log(`${can.length} for ${this.state.step}`);\r\n        \r\n        if (squares[i] !=='X'){\r\n            for(let j=0;j<can.length;j++) {\r\n                if(i===can[j]) {\r\n                    squares[i]='X';\r\n                    po=i;\r\n                    can=[];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for(let j=0; j<8;j++){\r\n            const mod = po % 5;\r\n            if(po + diry[j] >= 0 && po+diry[j] <=24 && mod+dirx[j] >=0 && mod+dirx[j]<=4) \r\n                if(squares[po+dirx[j]+diry[j]] !== 'X')\r\n                    can.push(po+dirx[j]+diry[j]);\r\n        }\r\n        if(can.length===0){\r\n            if(this.state.step===23) alert(\"You Won!\");\r\n            else {\r\n                alert(\"You Lose :<\");\r\n            }\r\n        }\r\n        // var newpo = dir.forEach((it,id) => {\r\n        //     if(i === po+it) {console.log(i);console.log(po); return i;}  \r\n        // })\r\n        this.setState({Squares: squares, step:this.state.step+1, po: po})\r\n    }\r\n    restart(){\r\n        const pok = Math.floor(Math.random()*25);\r\n        const re = this.state.Squares.fill(null);\r\n        re[pok] ='X';\r\n        this.setState({Squares: re, step:0, po:pok})\r\n    }\r\n    \r\n    render(){\r\n        return (\r\n            <div>\r\n                <button onClick={() => this.restart()} style={{border:\"solid  rgb(206, 57, 47) 5px\", color:\"rgb(206, 57, 47)\"}}>Restart the game!</button>\r\n                <Board  squares ={this.state.Squares} po={this.state.po} onClick={(i) => {this.handleClick(i)}} />\r\n                <i style={{fontSize:\"5px\"}}>Made by Chieuuuuuuuuu</i>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Game","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport Game from './game'\n\nfunction App() {\n  return (\n      <Game />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}